rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      
      // Allow querying by username for mentions
      allow list: if isSignedIn() && (
        // Allow listing all users (needed for mentions)
        request.query.limit <= 20 &&
        (
          // Allow searching by username
          request.query.filters.size() == 1 &&
          'username' in request.query.filters
        )
      );
      
      // Validate username format and required fields
      allow write: if request.resource.data.username == null || 
        request.resource.data.username.matches('^[a-zA-Z0-9_]{3,20}$');
    }

    // Blips collection
    match /blips/{blipId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && (
        // Allow author to update their blip
        resource.data.authorId == request.auth.uid ||
        // Allow any user to update likes and reblips arrays
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['likes', 'reblips', 'comments']))
      );
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    // Comments collection
    match /comments/{commentId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && resource.data.toUserId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.fromUserId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.toUserId == request.auth.uid && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      allow delete: if isSignedIn() && resource.data.toUserId == request.auth.uid;
    }
  }
} 